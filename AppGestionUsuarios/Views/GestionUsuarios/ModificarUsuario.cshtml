
﻿@{
    ViewBag.Title = "Modificar Usuario";
}

<!DOCTYPE html>

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>@ViewBag.Title</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;

            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            background: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;

            margin-bottom: 10px;
            font-weight: bold;
        }

        select, input[type="text"], button {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f9f9f9;
        }

        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }

            button:hover {
                background-color: #0056b3;
            }


        .button-group {
            display: flex;
            justify-content: space-between;
        }

            .button-group button {
                flex: 1;
                margin: 5px;
            }
    </style>
</head>
<body>
    <div class="container">
        <h1>@ViewBag.Title</h1>

        <form id="modifyUserForm">
            <label for="userDropdown">Seleccionar Usuario:</label>
            <select id="userDropdown">
                <option value="">Seleccione un usuario</option>
                @foreach (var usuario in ViewBag.Users as List<string>)
                {
                    <option value="@usuario">@usuario</option>
                }
            </select>

            <button type="button" onclick="selectUser()">Seleccionar Usuario</button>

            <label for="selectedUser">Usuario Seleccionado:</label>
            <input type="text" id="selectedUser" readonly />

            <button type="button" onclick="loadUserInfo()">Cargar Información</button>

            <h3>Modificar OU del Usuario</h3>
            <label for="newOUPrincipal">Nueva OU Principal:</label>
            <select id="newOUPrincipal" onchange="fetchOUSecundarias(); fetchDepartamentos();">
                <option value="">Seleccione una nueva OU Principal</option>
                @foreach (var ou in ViewBag.OUPrincipales as List<string>)
                {
                    <option value="@ou">@ou</option>
                }
            </select>

            <label for="newOUSecundaria">Nueva OU Secundaria:</label>
            <select id="newOUSecundaria">
                <option value="">Seleccione una OU Secundaria</option>
            </select>

            <label for="newDepartamento">Nuevo Departamento:</label>
            <select id="newDepartamento" onchange="fetchLugarEnvio();">
                <option value="">Seleccione un departamento</option>
            </select>

            <label for="newLugarEnvio">Nuevo Lugar de Envío:</label>
            <select id="newLugarEnvio">
                <option value="">Seleccione un lugar de envío</option>
            </select>

            <button type="button" onclick="modifyUserOU()">Guardar Cambios</button>

            <h3>Modificar Grupos del Usuario</h3>

            <!-- Lista de grupos actuales -->
            <label for="currentGroups">Grupos Actuales:</label>
            <select id="currentGroups" size="5">
                <!-- Se cargarán dinámicamente -->
            </select>
            <button type="button" onclick="removeUserFromGroup()">Eliminar Grupo Seleccionado</button>

            <!-- Lista de grupos disponibles para agregar -->
            <label for="availableGroups">Añadir a un Grupo:</label>
            <select id="availableGroups">
                <option value="">Seleccione un grupo</option>
                @foreach (var group in ViewBag.GruposAD as List<string>)
                {
                    <option value="@group">@group</option>
                }
            </select>
            <button type="button" onclick="addUserToGroup()">Añadir Grupo</button>


        </form>


        <script>
            function selectUser() {
                const dropdown = document.getElementById('userDropdown');
                const selectedUser = dropdown.value;

                if (!selectedUser) {
                    alert('Seleccione un usuario de la lista.');
                    return;
                }

                document.getElementById('selectedUser').value = selectedUser;
            }

            async function loadUserInfo() {
                const selectedUser = document.getElementById("selectedUser").value;
                if (!selectedUser) {
                    alert("Seleccione y confirme un usuario antes de cargar la información.");
                    return;
                }

                try {
                    const response = await fetch('/GestionUsuarios/GetUserDetails', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username: selectedUser })
                    });

                    const data = await response.json();
                    if (data.success) {
                        document.getElementById("newOUPrincipal").value = data.ouPrincipal;
                        fetchOUSecundarias();
                        fetchDepartamentos();

                        document.getElementById("newDepartamento").value = data.departamento;
                        fetchLugarEnvio();

                        document.getElementById("newLugarEnvio").value = data.lugarEnvio;
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    alert("Error al obtener información del usuario.");
                }
            }

            // Obtener las OUs Secundarias según la OU Principal seleccionada
            function fetchOUSecundarias() {
                const ouPrincipal = document.getElementById('newOUPrincipal').value;
                const ouSecundaria = document.getElementById('newOUSecundaria');
                ouSecundaria.innerHTML = '<option value="">Seleccione una OU Secundaria</option>';

                if (ouPrincipal) {
                    fetch('/GestionUsuarios/GetOUSecundarias', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ouPrincipal })
                    })
                        .then(response => response.json())
                        .then(data => {
                            data.forEach(ou => {
                                const option = document.createElement('option');
                                option.value = ou;
                                option.textContent = ou;
                                ouSecundaria.appendChild(option);
                            });
                        })
                        .catch(error => console.error('Error al obtener las OUs secundarias:', error));
                }
            }

            // Obtener los Departamentos según la OU Principal seleccionada
            function fetchDepartamentos() {
                const ouPrincipal = document.getElementById('newOUPrincipal').value;
                const departamento = document.getElementById('newDepartamento');
                departamento.innerHTML = '<option value="">Seleccione un departamento</option>';

                if (ouPrincipal) {
                    fetch('/GestionUsuarios/GetDepartamentos', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ouPrincipal })
                    })
                        .then(response => response.json())
                        .then(data => {
                            data.forEach(dep => {
                                const option = document.createElement('option');
                                option.value = dep;
                                option.textContent = dep;
                                departamento.appendChild(option);
                            });
                        })
                        .catch(error => console.error('Error al obtener los departamentos:', error));
                }
            }

            // Obtener los Lugares de Envío según el Departamento seleccionado
            function fetchLugarEnvio() {
                const departamento = document.getElementById('newDepartamento').value;
                const lugarEnvio = document.getElementById('newLugarEnvio');
                lugarEnvio.innerHTML = '<option value="">Seleccione un lugar de envío</option>';

                if (departamento) {
                    fetch('/GestionUsuarios/GetLugarEnvio', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ departamento })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.length === 1) {
                                lugarEnvio.innerHTML = '<option value="' + data[0] + '">' + data[0] + '</option>';
                            } else {
                                data.forEach(lugar => {
                                    const option = document.createElement('option');
                                    option.value = lugar;
                                    option.textContent = lugar;
                                    lugarEnvio.appendChild(option);
                                });
                            }
                        })
                        .catch(error => console.error('Error al obtener el lugar de envío:', error));
                }
            }

            // Enviar los cambios al servidor
            async function modifyUserOU() {
                const username = document.getElementById("selectedUser").value;
                const ouPrincipal = document.getElementById("newOUPrincipal").value;
                const ouSecundaria = document.getElementById("newOUSecundaria").value;
                const departamento = document.getElementById("newDepartamento").value;
                const lugarEnvio = document.getElementById("newLugarEnvio").value;

                if (!username || !ouPrincipal || !ouSecundaria || !departamento || !lugarEnvio) {
                    alert("Todos los campos son obligatorios.");
                    return;
                }

                try {
                    const response = await fetch('/GestionUsuarios/ModifyUserOU', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username, ouPrincipal, ouSecundaria, departamento, lugarEnvio })
                    });

                    const data = await response.json();
                    alert(data.message);
                } catch (error) {
                    alert("Error al modificar la OU.");
                }
            }
            // Cargar la información del usuario, incluyendo los grupos actuales
            async function loadUserInfo() {
                const selectedUser = document.getElementById("selectedUser").value;
                if (!selectedUser) {
                    alert("Seleccione y confirme un usuario antes de cargar la información.");
                    return;
                }

                try {
                    const response = await fetch('/GestionUsuarios/GetUserDetails', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username: selectedUser })
                    });

                    const data = await response.json();
                    if (data.success) {
                        document.getElementById("newOUPrincipal").value = data.ouPrincipal;
                        fetchOUSecundarias();
                        fetchDepartamentos();

                        document.getElementById("newDepartamento").value = data.departamento;
                        fetchLugarEnvio();

                        document.getElementById("newLugarEnvio").value = data.lugarEnvio;

                        // Cargar los grupos actuales del usuario
                        const groupList = document.getElementById("currentGroups");
                        groupList.innerHTML = ""; // Limpiar antes de agregar nuevos valores
                        data.groups.forEach(group => {
                            const option = document.createElement("option");
                            option.value = group;
                            option.textContent = group;
                            groupList.appendChild(option);
                        });

                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    alert("Error al obtener información del usuario.");
                }
            }

            // Añadir un usuario a un grupo seleccionado
            async function addUserToGroup() {
                const username = document.getElementById("selectedUser").value;
                const group = document.getElementById("availableGroups").value;

                if (!username || !group) {
                    alert("Seleccione un usuario y un grupo.");
                    return;
                }

                try {
                    const response = await fetch('/GestionUsuarios/ModifyUserGroup', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username, group, action: 'add' })
                    });

                    const data = await response.json();
                    alert(data.message);
                    loadUserInfo();  // Recargar la lista de grupos
                } catch (error) {
                    alert("Error al modificar el grupo.");
                }
            }

            // Eliminar un grupo al que pertenece el usuario
            async function removeUserFromGroup() {
                const username = document.getElementById("selectedUser").value;
                const groupList = document.getElementById("currentGroups");
                const selectedGroup = groupList.value;

                if (!username || !selectedGroup) {
                    alert("Seleccione un usuario y un grupo para eliminar.");
                    return;
                }

                if (!confirm(`¿Está seguro de que desea eliminar al usuario del grupo ${selectedGroup}?`)) {
                    return;
                }

                try {
                    const response = await fetch('/GestionUsuarios/ModifyUserGroup', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username: document.getElementById("selectedUser").value, group: selectedGroup, action: 'remove' })
                    });
                    const data = await response.json();
                    alert(data.message);
                    loadUserInfo();  // Refrescar la lista de grupos
                } catch (error) {
                    alert("Error al eliminar el grupo.");
                }
            }


        </script>

</body>
</html>
