<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Usuario</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            background-color: #f5f5f5;
        }

        form {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            background: #ffffff;
            padding: 20px;
            margin: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 1200px;
        }

            form .field-group, form .checkbox-group {
                flex: 1;
                min-width: 300px;
                margin-right: 20px;
            }

        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: bold;
        }

        select, input[type="text"], input[type="number"], input[type="date"], button {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: #f9f9f9;
        }

            select:focus, input:focus {
                outline: none;
                border-color: #007bff;
                box-shadow: 0 0 4px rgba(0, 123, 255, 0.25);
            }

        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }

            button:hover {
                background-color: #0056b3;
            }

        .checkbox-group label {
            font-weight: normal;
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
        }

        h4 {
            margin-top: 0;
            color: #333;
        }
    </style>
</head>
<body>
    <form id="ouForm">
        <!-- Campos principales -->
        <div class="field-group">
            <label for="ouPrincipal">OU Principal:</label>
            <select id="ouPrincipal" name="ouPrincipal" onchange="fetchOUSecundarias(); fetchDepartamentos();">
                <option value="">Seleccione una OU Principal</option>
                @foreach (var ou in ViewBag.OUPrincipales as List<string>)
                {
                    <option value="@ou">@ou</option>
                }
            </select>

            <label for="nFuncionario">Nº Funcionario:</label>
            <input type="text" id="nFuncionario" name="nFuncionario" onchange="checkNumberIdExists()" />

            <label for="nombre">Nombre:</label>
            <input type="text" id="nombre" name="nombre" oninput="generateUsername()" />

            <label for="apellido1">Apellido 1:</label>
            <input type="text" id="apellido1" name="apellido1" oninput="generateUsername()" />

            <label for="apellido2">Apellido 2:</label>
            <input type="text" id="apellido2" name="apellido2" oninput="generateUsername()" />

            <label for="nTelefono">Extensión de teléfono:</label>
            <input type="text" id="nTelefono" name="nTelefono" oninput="checkTelephoneExists()" />

            <label for="username">Nombre de Usuario:</label>
            <input type="text" id="username" name="username" readonly />
        </div>

        <!-- Más campos principales -->
        <div class="field-group">
            <label for="ouSecundaria">OU Secundaria:</label>
            <select id="ouSecundaria" name="ouSecundaria">
                <option value="">Seleccione una OU Secundaria</option>
            </select>

            <label for="departamento">Departamento:</label>
            <select id="departamento" name="departamento" onchange="fetchLugarEnvio()">
                <option value="">Seleccione un departamento</option>
            </select>

            <label for="lugarEnvio">Lugar de Envío:</label>
            <select id="lugarEnvio" name="lugarEnvio">
                <option value="">Seleccione un lugar de envío</option>
            </select>

            <label for="fechaCaducidadOp">Fecha de Caducidad:</label>
            <select id="fechaCaducidadOp" name="fechaCaducidadOp">
                <option value="si">Sí</option>
                <option value="no">No</option>
            </select>

            <label for="fechaCaducidad">Fecha de Caducidad:</label>
            <input type="date" id="fechaCaducidad" name="fechaCaducidad" />

            
            <label for="cuota">Cuota del usuario:</label>
            <select id="cuota" name="cuota">
                <option value="">Seleccione la cuota para el usuario</option>
                @foreach (var cuota in ViewBag.cuota as List<string>)
                {
                    <option value="@cuota">@cuota</option>
                }
            </select>
        </div>

        <!-- Checkboxes de grupos, cualquiera de los grupos comunes se mete aquí-->
        <div class="checkbox-group">
            <h4>Grupos de usuarios</h4>
            <label>
                <input type="checkbox" id="grupoInternet" name="grupoInternet" value="Internet" />
                Grupo Internet
            </label>
            <label>
                <input type="checkbox" id="grupoPortalEmpleado" name="grupoPortalEmpleado" value="GA_R_PORTALDELEMPLEADO" />
                Portal del empleado
            </label>
        </div>

        <div class="field-group">
            <label for="grupoDropdown">Seleccionar Grupos:</label>
            <select id="grupoDropdown" name="grupoDropdown">
                <option value="">Seleccione un grupo</option>
                @foreach (var grupo in ViewBag.GruposAD as List<string>)
                {
                    <option value="@grupo">@grupo</option>
                }
            </select>

            <button type="button" onclick="addGroup()">Añadir Grupo</button>

            <label for="gruposSeleccionados">Grupos Seleccionados:</label>
            <select id="gruposSeleccionados" name="gruposSeleccionados" size="5">
                <!-- Aquí se cargarán los grupos seleccionados -->
            </select>

            <button type="button" onclick="removeSelectedGroup()" style="margin-top: 10px;">Eliminar Grupo Seleccionado</button>
        </div>




        <!-- Botón de envío -->
        <div style="width: 100%; margin-top: 20px;">
            <button type="button" onclick="createUser()">Crear Usuario</button>
        </div>
    </form>

    <script>

        // Función para obtener las OUs Secundarias
        function fetchOUSecundarias() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria');
            ouSecundaria.innerHTML = '<option value="">Seleccione una OU Secundaria</option>';

            if (ouPrincipal) {
                fetch('/GestionUsuarios/GetOUSecundarias', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ouPrincipal })
                })
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(ou => {
                            const option = document.createElement('option');
                            option.value = ou;
                            option.textContent = ou;
                            ouSecundaria.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error al obtener las OUs secundarias:', error));
            }
        }


        function fetchDepartamentos() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const departamento = document.getElementById('departamento');
            departamento.innerHTML = '<option value="">Seleccione un departamento</option>';

            if (ouPrincipal) {
                fetch('/GestionUsuarios/GetDepartamentos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ouPrincipal })
                })
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(dep => {
                            const option = document.createElement('option');
                            option.value = dep;
                            option.textContent = dep;
                            departamento.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error al obtener los departamentos:', error));
            }
        }

        function fetchLugarEnvio() {
            const departamento = document.getElementById('departamento').value;
            const lugarEnvio = document.getElementById('lugarEnvio');
            lugarEnvio.innerHTML = '<option value="">Seleccione un lugar de envío</option>';

            if (departamento) {
                fetch('/GestionUsuarios/GetLugarEnvio', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ departamento })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 1) {
                            lugarEnvio.innerHTML = '<option value="' + data[0] + '">' + data[0] + '</option>';
                        } else {
                            data.forEach(lugar => {
                                const option = document.createElement('option');
                                option.value = lugar;
                                option.textContent = lugar;
                                lugarEnvio.appendChild(option);
                            });
                        }
                    })
                    .catch(error => console.error('Error al obtener el lugar de envío:', error));
            }
        }

        async function generateUsername() {
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const usernameField = document.getElementById('username');

            

            try {
                const response = await fetch('/GestionUsuarios/GenerateUsername', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nombre, apellido1, apellido2 })
                });

                const data = await response.json();

                if (data.success) {
                    usernameField.value = data.username;
                    usernameField.readOnly = true;
                } else {
                    alert(data.message || "Error al generar el nombre de usuario.");
                    usernameField.value = '';
                }
            } catch (error) {
                console.error("Error al generar el nombre de usuario:", error);
                alert("Ocurrió un error inesperado.");
                usernameField.value = '';
            }
        }


       

        async function checkNumberIdExists() {
            const nFuncionario = document.getElementById('nFuncionario').value.trim();
            if (!nFuncionario) {
                console.error("El número de funcionario está vacío.");
                alert("Por favor, ingrese un número de funcionario.");
                return true; // Asumimos que existe para evitar errores
            }

            if (nFuncionario != "999999") {

                try {
                    const response = await fetch('/GestionUsuarios/CheckNumberIdExists', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ nFuncionario })
                    });

                    if (response.ok) {
                        const data = await response.json();

                        if (data.success) {
                            if (data.exists) {
                                alert("El número de funcionario ya existe en el Directorio Activo.");
                                document.getElementById('nFuncionario').value = "";
                                return true; // Existe en el Directorio Activo
                            } else {
                                return false; // No existe en el Directorio Activo
                            }
                        } else {
                            console.error("Error en la respuesta del servidor: " + data.message);
                            alert("Error en la respuesta del servidor");
                            document.getElementById('nFuncionario').value = "";
                            return true; // Asumimos que existe si hay un error en el servidor
                        }
                    } else {
                        console.error("Error al verificar el número de funcionario: " + response.statusText);
                        return true; // Asumimos que existe si no hay una respuesta válida
                    }
                } catch (error) {
                    console.error("Error al verificar el número de funcionario:", error);
                    alert("Ocurrió un error al verificar el número de funcionario.");
                    return true; // Asumimos que existe si hay un error
                }
            }
        }

        async function checkTelephoneExists() {
            const nTelefono = document.getElementById("nTelefono").value.trim();
            try {
                const response = await fetch('/GestionUsuarios/CheckTelephoneExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nTelefono })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El número de teléfono ya existe en el directorio activo.");
                            document.getElementById('nTelefono').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('nTelefono').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el número de telefono: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el número de teléfono:", error);
                alert("Ocurrió un error al verificar el número de teléfono.");
                return true; // Asumimos que existe si hay un error
            }
        }



        function createUser() {
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const username = document.getElementById('username').value.trim();
            const nTelefono = document.getElementById('nTelefono').value.trim();
            const nFuncionario = document.getElementById('nFuncionario').value.trim();
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria').value;
            const departamento = document.getElementById('departamento').value;
            const fechaCaducidadOp = document.getElementById('fechaCaducidadOp').value;
            const fechaCaducidad = document.getElementById('fechaCaducidad').value;
            const cuota = document.getElementById('cuota').value;

            // Recopilar grupos seleccionados de checkboxes
            const gruposCheckbox = Array.from(document.querySelectorAll('.checkbox-group input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            // Recopilar grupos seleccionados de la lista desplegable
            const gruposLista = Array.from(document.getElementById('gruposSeleccionados').options)
                .map(option => option.value);

            // Unificar ambos arrays de grupos
            const grupos = [...gruposCheckbox, ...gruposLista];

            // Validar campos antes de enviar
            if (!nombre || !apellido1 || !username || !ouPrincipal || !ouSecundaria || !departamento) {
                alert('Por favor, complete todos los campos obligatorios.');
                return;
            }

            // Enviar datos al controlador
            fetch('/GestionUsuarios/CreateUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    nombre,
                    apellido1,
                    apellido2,
                    username,
                    nTelefono,
                    nFuncionario,
                    ouPrincipal,
                    ouSecundaria,
                    departamento,
                    fechaCaducidadOp,
                    fechaCaducidad,
                    cuota,
                    grupos // Grupos unificados
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Usuario creado exitosamente.');
                    } else {
                        alert(`Error al crear el usuario: ${data.message}`);
                    }
                })
                .catch(error => {
                    console.error('Error al crear el usuario:', error);
                    alert('Ocurrió un error al crear el usuario.');
                });
        }



        // Función para añadir un grupo a la lista seleccionada
        function addGroup() {
            const grupoDropdown = document.getElementById('grupoDropdown');
            const gruposSeleccionados = document.getElementById('gruposSeleccionados');

            const grupo = grupoDropdown.value;
            const grupoTexto = grupoDropdown.options[grupoDropdown.selectedIndex].text;

            if (!grupo) {
                alert("Por favor, seleccione un grupo válido.");
                return;
            }

            // Evitar duplicados
            const opcionesExistentes = Array.from(gruposSeleccionados.options).map(option => option.value);
            if (opcionesExistentes.includes(grupo)) {
                alert("Este grupo ya está en la lista.");
                return;
            }

            // Añadir el grupo a la lista de seleccionados
            const opcion = document.createElement('option');
            opcion.value = grupo;
            opcion.textContent = grupoTexto;
            gruposSeleccionados.appendChild(opcion);

            // Limpiar el dropdown
            grupoDropdown.value = "";
        }

        // Función para eliminar el grupo seleccionado al hacer clic en el botón
        function removeSelectedGroup() {
            const gruposSeleccionados = document.getElementById('gruposSeleccionados');

            if (gruposSeleccionados.selectedIndex === -1) {
                alert("Por favor, seleccione un grupo para eliminar.");
                return;
            }

            const opcionSeleccionada = gruposSeleccionados.options[gruposSeleccionados.selectedIndex];
            const confirmar = confirm(`¿Está seguro de que desea eliminar el grupo "${opcionSeleccionada.text}" de la lista?`);

            if (confirmar) {
                gruposSeleccionados.remove(gruposSeleccionados.selectedIndex);
            }
        }




        

    </script>
</body>
</html>
