<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Usuario</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            background-color: #f5f5f5;
        }

        form {
            background: #ffffff;
            padding: 20px;
            margin: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 450px;
        }

            form div {
                margin-bottom: 15px;
            }

        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: bold;
        }

        select, input[type="text"], button {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: #f9f9f9;
            cursor: pointer;
        }

            select:focus, input[type="text"]:focus {
                outline: none;
                border-color: #007bff;
                box-shadow: 0 0 4px rgba(0, 123, 255, 0.25);
            }

        button {
            background-color: #007bff;
            color: white;
            border: none;
        }

            button:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>
    <form id="ouForm">
        <div>
            <label for="ouPrincipal">OU Principal:</label>
            <select id="ouPrincipal" name="ouPrincipal" onchange="fetchOUSecundarias(); fetchDepartamentos();">
                <option value="">Seleccione una OU Principal</option>
                @foreach (var ou in ViewBag.OUPrincipales as List<string>)
                {
                    <option value="@ou">@ou</option>
                }
            </select>
        </div>

        <div>
            <label for="nFuncionario">Nº Funcionario:</label>
            <input type="text" id="nFuncionario" name="nFuncionario" />
        </div>

        <div>
            <label for="nombre">Nombre:</label>
            <input type="text" id="nombre" name="nombre" oninput="generateUsername()" />
        </div>

        <div>
            <label for="apellido1">Apellido 1:</label>
            <input type="text" id="apellido1" name="apellido1" oninput="generateUsername()" />
        </div>

        <div>
            <label for="apellido2">Apellido 2:</label>
            <input type="text" id="apellido2" name="apellido2" oninput="generateUsername()" />
        </div>

        <div>
            <label for="nTelefono">Extension de telefono:</label>
            <input type="number" id="nTelefono" name="nTelefono" onchange="checkNumberIdExists" />
        </div>

        <div>
            <label for="username">Nombre de Usuario:</label>
            <input type="text" id="username" name="username" readonly />
        </div>

        <div>
            <label for="ouSecundaria">OU Secundaria:</label>
            <select id="ouSecundaria" name="ouSecundaria">
                <option value="">Seleccione una OU Secundaria</option>
            </select>
        </div>

        <div>
            <label for="departamento">Departamento:</label>
            <select id="departamento" name="departamento" onchange="fetchLugarEnvio()">
                <option value="">Seleccione un departamento</option>
            </select>
        </div>

        <div>
            <label for="lugarEnvio">Lugar de Envío:</label>
            <select id="lugarEnvio" name="lugarEnvio">
                <option value="">Seleccione un lugar de envío</option>
            </select>
        </div>

        <div>
            <label for="portalEmpleado">Portal Empleado:</label>
            <select id="portalEmpleado" name="portalEmpleado">
                <option value="">Seleccione si desea crear un portal del empleado</option>
                @foreach (var portal in ViewBag.portalEmpleado as List<string>)
                {
                    <option value="@portal">@portal</option>
                }
            </select>
        </div>

        <div>
            <label for="cuota">Cuota del usuario:</label>
            <select id="cuota" name="cuota">
                <option value="">Seleccione la cuota para el usuario</option>
                @foreach (var cuota in ViewBag.cuota as List<string>)
                {
                    <option value="@cuota">@cuota</option>
                }
            </select>
        </div>

        <div>
            <button type="button" onclick="createUser()">Crear Usuario</button>
        </div>
        

    </form>

    <script>
        function fetchOUSecundarias() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria');
            ouSecundaria.innerHTML = '<option value="">Seleccione una OU Secundaria</option>';

            if (ouPrincipal) {
                fetch('/GestionUsuarios/GetOUSecundarias', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ouPrincipal })
                })
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(ou => {
                            const option = document.createElement('option');
                            option.value = ou;
                            option.textContent = ou;
                            ouSecundaria.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error al obtener las OUs secundarias:', error));
            }
        }

        function fetchDepartamentos() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const departamento = document.getElementById('departamento');
            departamento.innerHTML = '<option value="">Seleccione un departamento</option>';

            if (ouPrincipal) {
                fetch('/GestionUsuarios/GetDepartamentos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ouPrincipal })
                })
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(dep => {
                            const option = document.createElement('option');
                            option.value = dep;
                            option.textContent = dep;
                            departamento.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error al obtener los departamentos:', error));
            }
        }

        function fetchLugarEnvio() {
            const departamento = document.getElementById('departamento').value;
            const lugarEnvio = document.getElementById('lugarEnvio');
            lugarEnvio.innerHTML = '<option value="">Seleccione un lugar de envío</option>';

            if (departamento) {
                fetch('/GestionUsuarios/GetLugarEnvio', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ departamento })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 1) {
                            lugarEnvio.innerHTML = '<option value="' + data[0] + '">' + data[0] + '</option>';
                        } else {
                            data.forEach(lugar => {
                                const option = document.createElement('option');
                                option.value = lugar;
                                option.textContent = lugar;
                                lugarEnvio.appendChild(option);
                            });
                        }
                    })
                    .catch(error => console.error('Error al obtener el lugar de envío:', error));
            }
        }

        async function generateUsername() {
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const usernameField = document.getElementById('username');

            if (!nombre || !apellido1) {
                usernameField.value = '';
                return;
            }

            let candidatos = [];
            candidatos.push((nombre[0] + apellido1).substring(0, 12).toLowerCase());
            if (apellido2) {
                candidatos.push((nombre[0] + apellido1 + apellido2[0]).substring(0, 12).toLowerCase());
            }
            candidatos.push((nombre + apellido1.substring(0, 2) + (apellido2 ? apellido2.substring(0, 2) : '')).substring(0, 12).toLowerCase());

            for (const candidato of candidatos) {
                const existe = await checkUsernameExists(candidato);
                if (!existe) {
                    usernameField.value = candidato;
                    usernameField.readOnly = true;
                    return;
                }
            }

            usernameField.readOnly = false;
            usernameField.placeholder =
                usernameField.placeholder = "Elija un nombre de usuario";
        }

        async function checkUsernameExists(username) {
            try {
                const response = await fetch('/GestionUsuarios/CheckUsernameExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username })
                });

                if (response.ok) {
                    const exists = await response.json();
                    return exists;
                } else {
                    console.error('Error al verificar el nombre de usuario');
                    return true;
                }
            } catch (error) {
                console.error('Error al verificar el nombre de usuario:', error);
                return true;
            }
        }

        async function checkNumberIdExists(nFuncionario) {
            if (!nFuncionario) {
                console.error("El número de funcionario está vacío.");
                alert("Por favor, ingrese un número de funcionario.");
                return true; // Asumimos que existe para evitar errores
            }

            try {
                const response = await fetch('/GestionUsuarios/CheckNumberIdExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nFuncionario })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El número de funcionario ya existe en el Directorio Activo.");
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el número de funcionario: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el número de funcionario:", error);
                alert("Ocurrió un error al verificar el número de funcionario.");
                return true; // Asumimos que existe si hay un error
            }
        }


        function createUser() {
            // Recoger los valores del formulario
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const nTelefono = document.getElementById('nTelefono').value.trim();
            const username = document.getElementById('username').value.trim();
            const nFuncionario = document.getElementById('nFuncionario').value.trim();
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria').value;
            const departamento = document.getElementById('departamento').value;

            // Validar campos antes de enviar
            if (!nombre || !apellido1 || !nTelefono || !username || !ouPrincipal || !ouSecundaria || !departamento) {
                alert('Por favor, complete todos los campos obligatorios.');
                return;
            }

            // Enviar la solicitud
            fetch('/GestionUsuarios/CreateUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    nombre: nombre,
                    apellido1: apellido1,
                    apellido2: apellido2,
                    nTelefono: nTelefono
                    username: username,
                    nFuncionario: nFuncionario,
                    ouPrincipal: ouPrincipal,
                    ouSecundaria: ouSecundaria,
                    departamento: departamento
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Usuario creado exitosamente.');
                    } else {
                        alert('Error al crear el usuario: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error al crear el usuario:', error);
                    alert('Ocurrió un error al crear el usuario.');
                });
        }

        

    </script>
</body>
</html>
