<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Usuario</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        .form-container {
            max-width: 1200px;
            margin: 30px auto;
            background-color: #ffffff;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: #960018;
            margin-bottom: 20px;
        }

        .form-section {
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
        }

        .field-group, .checkbox-group {
            flex: 1;
            min-width: 280px;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
        }

        select,
        input[type="text"],
        input[type="number"],
        input[type="date"],
        button {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 6px;
            background-color: #f9f9f9;
            margin-bottom: 15px;
        }

            select:focus,
            input:focus {
                border-color: #960018;
                outline: none;
                box-shadow: 0 0 5px rgba(150, 0, 24, 0.3);
            }

        button {
            background-color: #960018;
            color: white;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            button:hover {
                background-color: #7a0013;
            }

        .checkbox-group label {
            display: flex;
            align-items: center;
            font-weight: normal;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
        }

        .full-width {
            width: 100%;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h1>Alta de Usuario</h1>
        <div class="form-section">
            <div class="field-group">
                <label for="nombre">Nombre:</label>
                <input type="text" id="nombre" name="nombre" required onblur="generateUsername();" />

                <label for="apellido1">Apellido 1:</label>
                <input type="text" id="apellido1" name="apellido1" required onblur="generateUsername();" />

                <label for="apellido2">Apellido 2:</label>
                <input type="text" id="apellido2" name="apellido2" onblur="generateUsername();" />

                <label for="username">Nombre de usuario:</label>
                <input type="text" id="username" name="username" readonly required />
            </div>

            <div class="field-group">
                <label for="nTelefono">Extensión de teléfono:</label>
                <input type="text" id="nTelefono" name="nTelefono" onblur="checkTelephoneExists();" />

                <label for="numeroLargoFijo">Número largo fijo:</label>
                <input type="text" id="numeroLargoFijo" name="numeroLargoFijo" onblur="checkOtherTelephoneExists();" />

                <label for="extensionMovil">Extensión del móvil:</label>
                <input type="text" id="extensionMovil" name="extensionMovil" onblur="checkMobileExists();" />

                <label for="numeroLargoMovil">Número largo del móvil:</label>
                <input type="text" id="numeroLargoMovil" name="numeroLargoMovil" onblur="checkOtherMobileExists();" />

                <label for="nFuncionario">Número de Funcionario:</label>
                <input type="text" id="nFuncionario" name="nFuncionario" onblur="checkNumberIdExists();" />

                
                <label for="dni">DNI :</label>
                <input type="text" id="dni" name="dni" placeholder="Introduce el DNI" onblur="checkDNIExists();" />
            </div>

            <div class="field-group">
                <label for="ouPrincipal">OU Principal:</label>
                <select id="ouPrincipal" name="ouPrincipal" onchange="fetchOUSecundarias(); fetchDepartamento(); fetchLugarEnvio();" required>
                    <option value="">Seleccione una OU Principal</option>
                    @if (ViewBag.OUPrincipales != null)

                    {

                        foreach (var ou in ViewBag.OUPrincipales as List<string>)

                        {
                            <option value="@ou">@ou</option>
                        }

                    }
                </select>

                <label for="ouSecundaria">OU Secundaria:</label>
                <select id="ouSecundaria" name="ouSecundaria" onchange="fetchDepartamento(); fetchLugarEnvio();">
                    <option value="">Seleccione una OU Secundaria (opcional)</option>
                </select>

                <label for="departamento">Departamento:</label>
                <input type="text" id="departamento" name="departamento" readonly required />

                <label for="lugarEnvio">Lugar de Envío:</label>
                <input type="text" id="lugarEnvio" name="lugarEnvio" readonly required />
            </div>

            <div class="field-group">
                <label for="fechaCaducidadOp">¿Fecha de caducidad?</label>
                <select id="fechaCaducidadOp" name="fechaCaducidadOp">
                    <option value="no">No</option>
                    <option value="si">Sí</option>
                </select>

                <label for="fechaCaducidad">Fecha de caducidad:</label>
                <input type="date" id="fechaCaducidad" name="fechaCaducidad" />

                <label for="tarjetaIdentificativa">Tarjeta Identificativa (Opcional):</label>
                <input type="text" id="tarjetaIdentificativa" name="tarjetaIdentificativa" placeholder="Introduce la tarjeta identificativa" onblur="checkTarjetaIdentificativaExists();" />
            </div>

            <div class="field-group">
                <label for="cuota">Cuota:</label>
                <select id="cuota" name="cuota">
                    @if (ViewBag.Cuota != null)

                    {

                        foreach (var cuota in ViewBag.Cuota as List<string>)

                        {
                            <option value="@cuota">@cuota</option>
                        }

                    }
                </select>
            </div>

            <div class="field-group">
                <label>Grupos:</label>
                <div class="checkbox-group">
                    @if (ViewBag.PortalEmpleado != null)

                    {

                        foreach (var grupo in ViewBag.PortalEmpleado as List<string>)

                        {
                            <label><input type="checkbox" value="@grupo" /> @grupo</label>
                        }

                    }
                </div>
            </div>

            <div class="field-group">
                <label for="grupoDropdown">Añadir grupo:</label>
                <select id="grupoDropdown">
                    <option value="">Seleccione un grupo</option>
                    @if (ViewBag.GruposAD != null)

                    {

                        foreach (var grupo in ViewBag.GruposAD as List<string>)

                        {
                            <option value="@grupo">@grupo</option>
                        }

                    }
                </select>
                <button type="button" onclick="addGroup()">Añadir</button>
            </div>

            <div class="field-group">
                <label for="gruposSeleccionados">Grupos seleccionados:</label>
                <select id="gruposSeleccionados" multiple></select>
                <button type="button" onclick="removeSelectedGroup()">Eliminar</button>
            </div>

            <div class="full-width">
                <button type="button" onclick="createUser()">Crear usuario</button>
            </div>
        </div>
    </div>

    <script>
        // Función para obtener las OUs Secundarias
        function fetchOUSecundarias() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria');
            ouSecundaria.innerHTML = '<option value="">Seleccione una OU Secundaria (opcional)</option>';

            if (ouPrincipal) {
                fetch('/AltaUsuario/GetOUSecundarias', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ouPrincipal })
                })
                    .then(response => {
                        console.log('Respuesta de GetOUSecundarias:', response);
                        return response.json();
                    })
                    .then(data => {
                        console.log('OU Secundarias recibidas:', data);
                        if (data.length === 0) {
                            ouSecundaria.innerHTML = '<option value="">No hay OU secundarias disponibles</option>';
                        } else {
                            data.forEach(ou => {
                                const option = document.createElement('option');
                                option.value = ou;
                                option.textContent = ou;
                                ouSecundaria.appendChild(option);
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error al obtener las OUs secundarias:', error);
                        alert('Error al obtener las OUs secundarias: ' + error.message);
                    });
            }
        }

        // Función para obtener el departamento
        function fetchDepartamento() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria').value;
            const departamentoField = document.getElementById('departamento');

            console.log('Iniciando fetchDepartamento con:', { ouPrincipal, ouSecundaria });

            if (!ouPrincipal) {
                console.log('No hay OU principal, limpiando campo departamento');
                departamentoField.value = '';
                return;
            }

            fetch('/AltaUsuario/GetDepartamento', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ouPrincipal, ouSecundaria })
            })
                .then(response => {
                    console.log('Respuesta del servidor (GetDepartamento):', response);
                    if (!response.ok) {
                        throw new Error(`Error HTTP: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Datos recibidos de GetDepartamento:', data);
                    if (data.success) {
                        console.log('Asignando departamento:', data.departamento);
                        departamentoField.value = data.departamento;
                    } else {
                        console.log('No se encontró departamento:', data.message);
                        departamentoField.value = '';
                        alert(data.message + ' (Path: ' + data.ldapPath + ')');
                    }
                })
                .catch(error => {
                    console.error('Error al obtener el departamento:', error);
                    alert('Error al obtener el departamento: ' + error.message);
                    departamentoField.value = '';
                });
        }

        // Nueva función para obtener el lugar de envío
        function fetchLugarEnvio() {
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria').value;
            const lugarEnvioField = document.getElementById('lugarEnvio');

            console.log('Iniciando fetchLugarEnvio con:', { ouPrincipal, ouSecundaria });

            // Limpiar el campo de lugar de envío si no hay OU principal
            if (!ouPrincipal) {
                console.log('No hay OU principal, limpiando campo lugar de envío');
                lugarEnvioField.value = '';
                return;
            }

            fetch('/AltaUsuario/GetLugarEnvio', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ouPrincipal, ouSecundaria })
            })
                .then(response => {
                    console.log('Respuesta del servidor (GetLugarEnvio):', response);
                    if (!response.ok) {
                        throw new Error(`Error HTTP: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Datos recibidos de GetLugarEnvio:', data);
                    if (data.success) {
                        console.log('Asignando lugar de envío:', data.lugarEnvio);
                        lugarEnvioField.value = data.lugarEnvio;
                    } else {
                        console.log('No se encontró lugar de envío:', data.message);
                        lugarEnvioField.value = '';
                        alert(data.message + ' (Path: ' + data.ldapPath + ')');
                    }
                })
                .catch(error => {
                    console.error('Error al obtener el lugar de envío:', error);
                    alert('Error al obtener el lugar de envío: ' + error.message);
                    lugarEnvioField.value = '';
                });
        }

        async function generateUsername() {
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const usernameField = document.getElementById('username');

            try {
                const response = await fetch('/AltaUsuario/GenerateUsername', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nombre, apellido1, apellido2 })
                });

                const data = await response.json();

                if (data.success) {
                    usernameField.value = data.username;
                    usernameField.readOnly = true;
                } else {
                    alert(data.message || "Error al generar el nombre de usuario.");
                    usernameField.value = '';
                }
            } catch (error) {
                console.error("Error al generar el nombre de usuario:", error);
                alert("Ocurrió un error inesperado.");
                usernameField.value = '';
            }
        }

        async function checkNumberIdExists() {
            const nFuncionario = document.getElementById('nFuncionario').value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!nFuncionario) {
                return false; // No existe conflicto, ya que es opcional
            }

            if (nFuncionario != "999999") {
                try {
                    const response = await fetch('/AltaUsuario/CheckNumberIdExists', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ nFuncionario })
                    });

                    if (response.ok) {
                        const data = await response.json();

                        if (data.success) {
                            if (data.exists) {
                                alert("El número de funcionario ya existe en el Directorio Activo.");
                                document.getElementById('nFuncionario').value = "";
                                return true; // Existe en el Directorio Activo
                            } else {
                                return false; // No existe en el Directorio Activo
                            }
                        } else {
                            console.error("Error en la respuesta del servidor: " + data.message);
                            alert("Error en la respuesta del servidor");
                            document.getElementById('nFuncionario').value = "";
                            return true; // Asumimos que existe si hay un error en el servidor
                        }
                    } else {
                        console.error("Error al verificar el número de funcionario: " + response.statusText);
                        return true; // Asumimos que existe si no hay una respuesta válida
                    }
                } catch (error) {
                    console.error("Error al verificar el número de funcionario:", error);
                    alert("Ocurrió un error al verificar el número de funcionario.");
                    return true; // Asumimos que existe si hay un error
                }
            }
            return false;
        }

        async function checkTelephoneExists() {
            const nTelefono = document.getElementById("nTelefono").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!nTelefono) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/CheckTelephoneExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nTelefono })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El número de teléfono ya existe en el directorio activo.");
                            document.getElementById('nTelefono').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('nTelefono').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el número de telefono: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el número de teléfono:", error);
                alert("Ocurrió un error al verificar el número de teléfono.");
                return true; // Asumimos que existe si hay un error
            }
        }

        async function checkOtherTelephoneExists() {
            const numeroLargoFijo = document.getElementById("numeroLargoFijo").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!numeroLargoFijo) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/CheckOtherTelephoneExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ numeroLargoFijo })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El número largo fijo ya existe en el directorio activo.");
                            document.getElementById('numeroLargoFijo').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('numeroLargoFijo').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el número largo fijo: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el número largo fijo:", error);
                alert("Ocurrió un error al verificar el número largo fijo.");
                return true; // Asumimos que existe si hay un error
            }
        }

        async function checkMobileExists() {
            const extensionMovil = document.getElementById("extensionMovil").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!extensionMovil) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/CheckMobileExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ extensionMovil })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("La extensión del móvil ya existe en el directorio activo.");
                            document.getElementById('extensionMovil').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('extensionMovil').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar la extensión del móvil: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar la extensión del móvil:", error);
                alert("Ocurrió un error al verificar la extensión del móvil.");
                return true; // Asumimos que existe si hay un error
            }
        }

        async function checkOtherMobileExists() {
            const numeroLargoMovil = document.getElementById("numeroLargoMovil").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!numeroLargoMovil) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/CheckOtherMobileExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ numeroLargoMovil })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El número largo del móvil ya existe en el directorio activo.");
                            document.getElementById('numeroLargoMovil').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('numeroLargoMovil').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el número largo del móvil: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el número largo del móvil:", error);
                alert("Ocurrió un error al verificar el número largo del móvil.");
                return true; // Asumimos que existe si hay un error
            }
        }

        async function checkTarjetaIdentificativaExists() {
            const tarjetaIdentificativa = document.getElementById("tarjetaIdentificativa").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!tarjetaIdentificativa) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/checkTarjetaIdentificativaExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ tarjetaIdentificativa }) // Corrección: Usar tarjetaIdentificativa en lugar de nTelefono
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("La tarjeta identificativa ya existe en el directorio activo.");
                            document.getElementById('tarjetaIdentificativa').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('tarjetaIdentificativa').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar la tarjeta identificativa: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar la tarjeta identificativa:", error);
                alert("Ocurrió un error al verificar la tarjeta identificativa.");
                return true; // Asumimos que existe si hay un error
            }
        }

        // Nueva función para verificar si el DNI ya existe
        async function checkDNIExists() {
            const dni = document.getElementById("dni").value.trim();
            // Si el campo está vacío, no hacemos nada (es opcional)
            if (!dni) {
                return false; // No existe conflicto, ya que es opcional
            }

            try {
                const response = await fetch('/AltaUsuario/CheckDNIExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ dni })
                });

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        if (data.exists) {
                            alert("El DNI ya existe en el Directorio Activo.");
                            document.getElementById('dni').value = "";
                            return true; // Existe en el Directorio Activo
                        } else {
                            return false; // No existe en el Directorio Activo
                        }
                    } else {
                        console.error("Error en la respuesta del servidor: " + data.message);
                        alert("Error en la respuesta del servidor");
                        document.getElementById('dni').value = "";
                        return true; // Asumimos que existe si hay un error en el servidor
                    }
                } else {
                    console.error("Error al verificar el DNI: " + response.statusText);
                    return true; // Asumimos que existe si no hay una respuesta válida
                }
            } catch (error) {
                console.error("Error al verificar el DNI:", error);
                alert("Ocurrió un error al verificar el DNI.");
                return true; // Asumimos que existe si hay un error
            }
        }

        async function createUser() {
            const nombre = document.getElementById('nombre').value.trim();
            const apellido1 = document.getElementById('apellido1').value.trim();
            const apellido2 = document.getElementById('apellido2').value.trim();
            const username = document.getElementById('username').value.trim();
            const nTelefono = document.getElementById('nTelefono').value.trim();
            const nFuncionario = document.getElementById('nFuncionario').value.trim();
            const numeroLargoFijo = document.getElementById('numeroLargoFijo').value.trim();
            const extensionMovil = document.getElementById('extensionMovil').value.trim();
            const numeroLargoMovil = document.getElementById('numeroLargoMovil').value.trim();
            const tarjetaIdentificativa = document.getElementById('tarjetaIdentificativa').value.trim();
            const dni = document.getElementById('dni').value.trim(); 
            const ouPrincipal = document.getElementById('ouPrincipal').value;
            const ouSecundaria = document.getElementById('ouSecundaria').value;
            const departamento = document.getElementById('departamento').value;
            const lugarEnvio = document.getElementById('lugarEnvio').value;
            const fechaCaducidadOp = document.getElementById('fechaCaducidadOp').value;
            let fechaCaducidad = document.getElementById('fechaCaducidad').value;
            const cuota = document.getElementById('cuota').value;

            // Si el usuario selecciona "no", asignamos la fecha de hoy
            if (fechaCaducidadOp === "no") {
                fechaCaducidad = new Date().toISOString().split('T')[0];
            }

            // Recopilar grupos seleccionados de checkboxes
            const gruposCheckbox = Array.from(document.querySelectorAll('.checkbox-group input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            // Recopilar grupos seleccionados de la lista desplegable
            const gruposLista = Array.from(document.getElementById('gruposSeleccionados').options)
                .map(option => option.value);

            // Unificar ambos arrays de grupos
            const grupos = [...gruposCheckbox, ...gruposLista];

            // Validar campos obligatorios (nTelefono, nFuncionario, numeroLargoFijo, extensionMovil, numeroLargoMovil, tarjetaIdentificativa y dni son opcionales)
            if (!nombre || !apellido1 || !username || !ouPrincipal || !dni) {
                alert('Por favor, complete todos los campos obligatorios.');
                return;
            }

            // Si el usuario selecciona "sí", se exige que se haya seleccionado una fecha de caducidad
            if (fechaCaducidadOp === "si" && !fechaCaducidad) {
                alert('Por favor, seleccione una fecha de caducidad.');
                return;
            }

            // Verificar si los valores ya existen (si se proporcionaron)
            const telephoneExists = await checkTelephoneExists();
            const numberIdExists = await checkNumberIdExists();
            const otherTelephoneExists = await checkOtherTelephoneExists();
            const mobileExists = await checkMobileExists();
            const otherMobileExists = await checkOtherMobileExists();
            const tarjetaIdentificativaExists = await checkTarjetaIdentificativaExists();
            const dniExists = await checkDNIExists(); // Nueva verificación

            if (telephoneExists || numberIdExists || otherTelephoneExists || mobileExists || otherMobileExists || tarjetaIdentificativaExists || dniExists) {
                return; // Detener el proceso si hay conflictos
            }

            // Enviar datos al controlador
            try {
                const response = await fetch('/AltaUsuario/CreateUser', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        nombre,
                        apellido1,
                        apellido2,
                        username,
                        nTelefono,
                        nFuncionario,
                        numeroLargoFijo,
                        extensionMovil,
                        numeroLargoMovil,
                        tarjetaIdentificativa,
                        dni, 
                        ouPrincipal,
                        ouSecundaria: ouSecundaria || null,
                        departamento,
                        lugarEnvio,
                        fechaCaducidadOp,
                        fechaCaducidad,
                        cuota,
                        grupos
                    })
                });
                const data = await response.json();
                if (data.success) {
                    alert('Usuario creado exitosamente.');
                } else {
                    alert(`Error al crear el usuario: ${data.message}`);
                }
            } catch (error) {
                console.error('Error al crear el usuario:', error);
                alert('Ocurrió un error al crear el usuario: ' + error.message);
            }
        }

        // Función para añadir un grupo a la lista seleccionada
        function addGroup() {
            const grupoDropdown = document.getElementById('grupoDropdown');
            const gruposSeleccionados = document.getElementById('gruposSeleccionados');

            const grupo = grupoDropdown.value;
            const grupoTexto = grupoDropdown.options[grupoDropdown.selectedIndex].text;

            if (!grupo) {
                alert("Por favor, seleccione un grupo válido.");
                return;
            }

            // Evitar duplicados
            const opcionesExistentes = Array.from(gruposSeleccionados.options).map(option => option.value);
            if (opcionesExistentes.includes(grupo)) {
                alert("Este grupo ya está en la lista.");
                return;
            }

            // Añadir el grupo a la lista de seleccionados
            const opcion = document.createElement('option');
            opcion.value = grupo;
            opcion.textContent = grupoTexto;
            gruposSeleccionados.appendChild(opcion);

            // Limpiar el dropdown
            grupoDropdown.value = "";
        }

        // Función para eliminar el grupo seleccionado al hacer clic en el botón
        function removeSelectedGroup() {
            const gruposSeleccionados = document.getElementById('gruposSeleccionados');

            if (gruposSeleccionados.selectedIndex === -1) {
                alert("Por favor, seleccione un grupo para eliminar.");
                return;
            }

            const opcionSeleccionada = gruposSeleccionados.options[gruposSeleccionados.selectedIndex];
            const confirmar = confirm(`¿Está seguro de que desea eliminar el grupo "${opcionSeleccionada.text}" de la lista?`);

            if (confirmar) {
                gruposSeleccionados.remove(gruposSeleccionados.selectedIndex);
            }
        }

        // Función para actualizar el estado del campo de fecha según la opción seleccionada
        function updateFechaCaducidadField() {
            const fechaSelect = document.getElementById('fechaCaducidadOp');
            const fechaInput = document.getElementById('fechaCaducidad');
            if (fechaSelect.value === 'no') {
                fechaInput.disabled = true;
                fechaInput.value = ""; // Limpiamos el campo
            } else {
                fechaInput.disabled = false;
            }
        }

        // Asignar el event listener al select
        document.getElementById('fechaCaducidadOp').addEventListener('change', updateFechaCaducidadField);

        // Al cargar la página, actualizamos el estado del campo según el valor por defecto
        window.addEventListener('load', updateFechaCaducidadField);
    </script>
</body>
</html>