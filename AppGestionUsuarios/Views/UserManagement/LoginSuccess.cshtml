@{
    ViewData["Title"] = "Gestión de Usuarios";
    var ouPrincipales = ViewBag.OUPrincipales as List<string>;
    var ouSecundarias = ViewBag.OUSecundarias as Dictionary<string, List<string>>;
}

<h2>Gestión de Usuarios</h2>

<form id="ouForm">
    <div>
        <label for="ouPrincipal">OU Principal:</label>
        <select id="ouPrincipal" name="ouPrincipal" onchange="updateOUs()">
            <option value="">Seleccione una OU Principal</option>
            @foreach (var ou in ouPrincipales)
            {
                <option value="@ou">@ou</option>
            }
        </select>
    </div>

    <div>
        <label for="ouSecundaria">OU Secundaria:</label>
        <select id="ouSecundaria" name="ouSecundaria">
            <option value="">Seleccione una OU Secundaria</option>
        </select>
    </div>

    <button type="submit">Enviar</button>
</form>

<script>
    // JavaScript para manejar la lógica de las listas dependientes
    const ouSecundariasData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ouSecundarias));

    function updateOUs() {
        const ouPrincipal = document.getElementById('ouPrincipal').value;
        const ouSecundaria = document.getElementById('ouSecundaria');

        // Limpiar el segundo dropdown
        ouSecundaria.innerHTML = '<option value="">Seleccione una OU Secundaria</option>';

        if (ouPrincipal && ouSecundariasData[ouPrincipal]) {
            ouSecundariasData[ouPrincipal].forEach(ou => {
                const option = document.createElement('option');
                option.value = ou;
                option.textContent = ou;
                ouSecundaria.appendChild(option);
            });
        }
    }
</script>
